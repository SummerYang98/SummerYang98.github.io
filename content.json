{"meta":{"title":"OldYangHead","subtitle":"","description":"玩一玩","author":"SummerYang98","url":"http://SummerYang98.github.io","root":"/"},"pages":[],"posts":[{"title":"Docker","slug":"Docker","date":"2022-02-14T05:48:41.000Z","updated":"2022-02-15T03:13:32.404Z","comments":true,"path":"2022/02/14/Docker/","link":"","permalink":"http://summeryang98.github.io/2022/02/14/Docker/","excerpt":"What is “Docker”? Let’s study together!","text":"What is “Docker”? Let’s study together! Docker Docker(容器虚拟化技术)是一个开源的容器引擎，基于Go语言。 将应用和依赖打包到一个轻量级、可移植的容器中，然后发布到Linux或Windows操作系统的机器上，也可以实现虚拟化。”一次封装，到处运行”。 Docker是一个用于开发，交付和运行应用程序的开放平台。Docker使应用程序与基础架构分开。利用Docker的方法快速交付，测试和部署代码，减少编写代码和在生产环境中运行代码之间的延迟。 Docker优点 更快速地交付和部署 更便捷的升级和扩缩容 更简单地系统运维 更高效地利用计算资源 Docker是内核级别的虚拟化，在一个物理机上可以运行很多容器实例。充分发挥服务器性能。 Docker三概念 **镜像(Image)**：一种轻量级、可执行的独立软件包，用来打包软件运行环境开发的软件，包含运行软件所需的所有内容，包括代码、库、环境变量、配置文件等部分。 好比一个模板，可以通过这个模板来创建容器服务。 镜像——&gt;run——&gt;容器（提供服务）。 **容器(Container)**：镜像是静态的定义，容器是镜像运行时的实体。 通过镜像创建，利用容器技术，独立运行一个或一组应用。 基本命令：启动，停止，删除。 **仓库(Repository)**：存放镜像。 公有仓库 私有仓库 虚拟机技术&amp;容器虚拟化技术： 传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整的操作系统，再在系统上运行所需的应用程序。 容器虚拟化技术允许应用程序直接运行于宿主机的内核，容器内没有自己的内核，也没有进行硬件虚拟。更加轻便。各个容器之间相互隔离，每个容器有自己的文件系统，容器之间的进程不会相互影响。 Docker为什么比VM快： Docker比虚拟机的抽象层更少。docker不需要虚拟化硬件资源，而是使用真实物理机的硬件资源，在CPU、内存利用率上优势明显。 Docker使用的是宿主机的内核，不需要加载Guest OS。 Docker基本命令123docker start # 启动docker容器docker run xxx # 运行xxxdocker 命令 --help # 帮助 镜像命令1234docker images # 查看镜像docker search xxx # 搜索镜像docker pull xxx # 下载镜像docker rmi -f [ID] # 删除镜像 容器命令有了镜像才可以创建容器 创建容器12345678docker run [可选参数] image # 新建容器并启动 # 参数说明 --name=&quot;Name&quot; 容器名字，用来区分容器 -d 后台方式运行 -it 使用交互方式运行，进入容器查看内容 -P 指定容器端口 -p 8080:8080 -p 主机端口:容器端口 -p 随机指定端口 退出容器12exit # 退出容器并停止Ctrl + p + q # 退出容器不停止 查看状态1docker ps # 当前所有运行的容器 删除容器12docker rm 容器ID # 删除容器docker rm -f $(docker ps -aq) # 删除所有容器 启动和停止容器1234docker start 容器IDdocker restart 容器IDdocker stop 容器IDdocker kill 容器ID 其它命令后台启动容器12docker run -d centos# 常见问题，容器后台运行，发现没有提供服务，自动停止 查看日志1docker logs -tf --tail num 容器ID # 显示指定条数日志 查看容器中进程信息1top命令 进入当前正在运行的容器12345# 方式一：进入容器开启新中断，可以进行操作(常用)docker exec -it 容器ID bashShell 如：docker exec -it 291e53f682e3 /bin/bash# 方式二：进入正在执行的终端，不会启动新进程docker attach 容器ID 从容器拷贝文件到主机上1docker cp 容器id:容器内路径 目的主机路径 详细信息1docker inspect 容器ID Docker镜像UnionFS联合文件系统 分层、轻量级、高性能的文件系统。支持对文件系统的修改作为一次提交来一层层叠加，同时可以将不同目录挂载到同一个虚拟文件系统下。 UnionFS是Docker镜像的基础，镜像可以通过分层来继承。基于基础镜像，可以制作具体应用镜像。 UnionFS特征 一次同时加载多个文件系统，但外部只能看到一个文件系统。联合加载会将各层文件系统叠加起来，这样最终的文件系统会包含所有底层文件和目录。 Docker镜像加载原理 Docker镜像由一层一层的文件系统组成，这种层次的文件构成文件系统UnionFS。 bootfs。Docker镜像的最底层是bootfs。包含boot加载器和内核。 rootfs。在bootfs之上。包含标准目录和文件。 分层理解 Docker镜像都是只读的，当容器启动时，一个新的可写层被加载到镜像顶部。 这个新的层就是容器层。容器之下的都被称为镜像层。 Commit镜像12docker commit 提交容器成为一个新的副本docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 目标镜像名:[TAG] 容器数据卷 用于容器持久化和容器之间的继承与共享数据。 容器持久化和同步操作 使用数据卷12方式一：使用命令挂载 -vdocker run -it -v 主机目录:容器内目录 &#x3D;&#x3D;具名&#x3D;&#x3D;和匿名挂载12345678910# 匿名挂载-v 容器内路径docker run -d -P --name nginx01 -v /etc/nginx nginx# 查看所有volume情况docker volume ls# 具名挂载-v 卷名:容器内路径docker run -d -P --name nginx02 -v xxx:/etc/nginx nginx 123-v 容器内路径 # 匿名挂载-v 卷名:容器内路径 # 具名挂载-v /宿主机路径::容器内路径 # 指定路径挂载 数据卷容器 命名的容器挂载数据卷，其它容器通过挂载这个容器实现数据共享。 挂载数据卷的容器，称为数据卷容器。 123--volumes-from 父容器 父：docker run -it --name dc01 zzyy/centos 子：docker run -it --name dc02 --volumes-from dc01 zzyy/centos DockerFile Dockerfile用来构建Docker镜像文件。 由一系列命令和参数构成的脚本。 构建步骤 编写DockerFile文件 docker build：构建成为一个镜像 docker run：运行镜像 docker push 发布镜像（DockerHub、阿里云镜像仓库…） 基础知识 每个指令都是大写字母 执行从上到下顺序执行 # 表示注释 每条指令都会创建提交一个新的镜像层，并提交。 DockerFile&amp;镜像&amp;容器 DockerFile：构建文件，定义了步骤，源代码。 Docker Images：通过DockerFile构建生成的镜像，最终发布和运行的产品。 Docker Container：容器就是镜像运行起来提供服务。 指令123456789101112FROM # 基础镜像，一切从这里开始MAINTAINER # 镜像作者，姓名+邮箱RUN # 镜像构建时的运行命令ADD # 添加内容WORKDIR # 镜像的工作目录VOLUME # 挂载的目录EXPOSE # 指定暴露端口CMD # 指定容器启动时运行的命令,只有最后一个会生效ENTRYPOINT # 指定容器启动时运行的命令，可追加命令ONBUILD # 触发指令COPY # 将文件拷贝到镜像中ENV # 构件时设置环境变量 个人操作修改容器设置12vi /var/lib/docker/containers/[容器ID全称]/hostconfig.jsonvi /var/lib/docker/containers/[容器ID全称]/config.v2.json Docker进入root1sudo su Docker容器Ubuntu拒绝连接12# 进入ubuntu后service ssh start Docker Hub1https://hub.docker.com/","categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://summeryang98.github.io/tags/Docker/"}]},{"title":"Hello World","slug":"hello-world","date":"1970-01-01T00:00:00.000Z","updated":"2022-02-14T03:42:08.049Z","comments":true,"path":"1970/01/01/hello-world/","link":"","permalink":"http://summeryang98.github.io/1970/01/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"Docker","slug":"Docker","permalink":"http://summeryang98.github.io/tags/Docker/"}]}